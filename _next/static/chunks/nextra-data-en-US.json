{"/before-you-start":{"title":"Before You Start","data":{"prerequisites#Prerequisites":"You have already created an AWS account. If not, you can create one here.\nSome workshops may require you to have AWS CLI installed on your local machine. You can install it by following the instructions here.\nIt's recommended to learn the basics of AWS services that are related to the workshop you are going to take. You can find the official AWS documentation here.\nSome basic knowledge of common programming languages such as Python, JavaScript is also recommended.","notes#Notes":"This website is created for educational purposes only. The content is based on my personal knowledge and experience. I am not responsible for any misuse of the content or any loss that may occur from using the content on this website.\nAlmost all of the workshops utilize the AWS Free Tier, so you can practice without worrying about costs. However, please be aware of the services that are not included in the Free Tier and the usage limits of the Free Tier. You can find more information about the AWS Free Tier here."}},"/":{"title":"Introduction","data":{"preface#Preface":"Hello everyone, I'm Nghia Pham, you can call me Ben. I'm the creator of this website.A few years ago, I started my software engineering career as an outsider to the tech industry. My background was in law so\nI had no formal education in computer science at university. Instead, I joined a 2-year programming bootcamp at Ho Chi Minh City, Vietnam and kept learning and practicing every day to become a software engineer.I was aware that I need to make more efforts to supplement my lack of formal education compared to engineers who graduated from universities, so I keep learning new knowledge and technologies every day.\nHowever, for a long time, I seldom noted down what I learned because it was not necessary and I thought I could remember it all. But as time passed, I found that I forgot many things that I had learned before.\nUntil one day I relized that the best way to learn is to teach. When you teach, you need to understand the knowledge deeply and clearly to explain it to others. Additionally, you can help others learn and grow, which is a great thing to do for the community.That is the reason why I created this website to share my knowledge and experience with the community, especially those who are new to the tech industry or want to learn AWS.I hope this website can help you learn AWS and other technologies effectively.","inspiration#Inspiration":"AWS Studying Group is a community of AWS enthusiasts who are passionate about learning and sharing knowledge about AWS.\nI would like to thank Mr. Hung Nguyen and the administrators of the group for inspiring me in developing my AWS skills and sharing knowledge with the community."}},"/overview":{"title":"Overview","data":{"":"Amazon Web Services (AWS) is the world's leading cloud platform, globally offering over 200 featured services.\nIt is widely used due to its scalability, reliability, and large range of services.\nMastering AWS can open up many opportunities in your career path, from Cloud Architect to Cloud Engineer...Benlab's Workshops is created to provide a comprehensive guide to learn AWS through practical labs and workshops.\nThey are designed to be simple and easy to follow, even for beginners.\nEach workshop will focus on a specific AWS service, guiding you through the basics to advanced topics, and providing hands-on labs to practice what you have learned."}},"/workshops":{"title":"Workshops","data":{"":"The workshops in this website are designed to be simple and easy to follow, even for beginners.\nEach workshop will focus on some specific AWS services, providing hands-on labs to practice what you have learned."}},"/workshops/eni-and-use-cases":{"title":"Elastic Network Interface (ENI) and Use Cases","data":{"what-is-elastic-network-interface-eni#What is Elastic Network Interface (ENI)?":"An elastic network interface is a logical networking component in a VPC that represents a virtual network card. You can create and configure network interfaces and attach them to instances that you launch in the same Availability Zone. - AWS Documentation\nHave you seen a network interface before? If you have ever set up a computer, you might have seen a Network Interface Card (NIC) that you plug into your computer to connect to the internet and other devices.In AWS, Elastic Network Interfaces (ENIs) are the virtual equivalent of physical network interfaces.\nYou can think of an ENI as a virtual network card that you can attach to an EC2 instance, a little like how you would attach a physical network card to a computer. ENIs are used for connecting your instances to the internet, other instances, and other AWS services.An ENI has the following attributes:\nA primary private IPv4 address and one or more secondary private IPv4 addresses\nOne Elastic IP address per private IPv4 address\nOne public IPv4 address\nOne or more IPv6 addresses\nOne or more security groups\nA MAC address\nSince ENIs are separate from instances, they can be managed independently and have their own lifecycle.\nYou can attach and detach ENIs from instances as needed. This allows you to move an ENI between instances, which can be useful for scenarios and use cases where you need to change the network configuration of an instance.","use-cases#Use Cases":"From the attributes above, we can see that ENIs are versatile and can be used in various scenarios.\nIn this workshop, we will explore some use cases for Elastic Network Interfaces (ENIs) applied to real-world scenarios and step-by-step guides on how to set them up through hands-on labs.\nSetup a Low-budget NAT Instance\nSetup a Low-budget Load Balancer (coming soon)\nSetup a Dual-homed Instance (coming soon)"}},"/workshops/eni-and-use-cases/setup-a-low-budget-load-balancer":{"title":"Setup a Low-Budget Load Balancer","data":{"":"Load balancing is a technique used to distribute incoming network traffic across multiple servers. This technique is commonly used to improve the performance and reliability of applications.\nWhen you use a load balancer, you can distribute client requests evenly across multiple upstream servers, which helps to prevent any single server from becoming a bottleneck and ensures that your application remains available and responsive to users.\nYou can add or remove servers from the load balancer as needed, which makes it easy to scale your application horizontally.\nAdditionally, load balancers can help to improve the security of your application by providing a single point of entry for client requests, which can help to protect your servers from direct exposure to the internet.The most common and recommended way to implement load balancing on AWS is by using the Elastic Load Balancing (ELB) service.\nELB automatically distributes incoming application traffic across multiple targets, such as EC2 instances, containers, and IP addresses. It can handle a large volume of traffic and scale up or down based on demand.\nSince it is a managed service, you don't have to worry about the underlying infrastructure, such as the number of instances, the health of the instances, or the availability of the load balancer itself.\nAWS guarantees the monthly uptime of the load balancer is up to 99.99% - that's less than 1 hour of downtime annually! For more information, see the AWS Service Level Agreement.However, if you are looking for a low-budget solution to implement load balancing that doesn't require a high level of availability, for example, for a development or testing environment, you can utilize the attributes of an Elastic Network Interface (ENI) to create a simple load balancer.In this lab, we will create a low-budget load balancer using HAProxy that runs on an EC2 instance.\nWe will go through the following steps:\nCreate a VPC where we will deploy our load balancer.\nCreate an auto-scaling group with a launch configuration that includes a user data script to install and configure HAProxy.","step-1-create-a-vpc#Step 1: Create a VPC":"We will create a VPC as the diagram below:\nOpen the VPC console.\nIn the sidebar, choose Your VPCs.\nChoose Create VPC.\nIn the VPC settings section, enter the following information:\nResources to create: VPC and more. It is a handy option that allows you to create a VPC quickly along with other resources like subnets, route tables, and internet gateways.\nName tag auto-generation: Enter your VPC name.\nIPv4 CIDR block: 10.0.0.0/16.\nNumber of Availability Zones (AZs): 2.\nNumber of public subnets: 2.\nNumber of private subnets: 2.\nNAT gateway: None. We temporarily disable the NAT gateway to reduce the cost of the lab.\nVPC endpoint: None.\nChoose Create VPC.","step-2-create-the-security-groups-for-the-load-balancer-instance#Step 2: Create the security groups for the load balancer instance":"In the VPC console, choose Security Groups in the sidebar.\nChoose Create security group.\nIn the Create security group wizard, enter the following information:\nSecurity group name: Enter a name for your security group.\nDescription: Enter a description for your security group.\nVPC: Select the VPC you created in the previous step.\nInbound rules: Add the following inbound rules:\nType: HTTP.\nSource: Anywhere.\nOutbound rules: Add the following outbound rules:\nType: All traffic.\nDestination: Anywhere.\nChoose Create security group.","step-3-create-the-security-group-for-the-web-server-instances#Step 3: Create the security group for the web server instances":"Choose Create security group.\nIn the Create security group wizard, enter the following information:\nSecurity group name: Enter a name for your security group.\nDescription: Enter a description for your security group.\nVPC: Select the VPC you created in the previous step.\nInbound rules: Add the following inbound rules:\nType: HTTP.\nSource: Select the load balancer security group you created earlier.\nOutbound rules: Add the following outbound rules:\nType: All traffic.\nDestination: Anywhere.\nChoose Create security group.","step-4-create-an-elastic-ip-addresses-for-the-load-balancer-instances#Step 4: Create an Elastic IP addresses for the load balancer instances":"Note that you will be charged 0.005 USD per hour for each Elastic IP address that is allocated regardless of whether it is associated with an instance or not. Check it out here.\nOpen the VPC console.\nIn the sidebar, choose Elastic IPs.\nChoose Allocate Elastic IP address.\nChoose Allocate.\nNow you have an Elastic IP address that you can associate with the load balancer instances later.","step-5-create-role-for-the-load-balancer-instances#Step 5: Create role for the load balancer instances":"To allow the load balancer instances to associate the Elastic IP address, we need to create a role with the necessary permissions.\nOpen the IAM console.\nIn the sidebar, choose Roles.\nChoose Create role.\nIn the Create role wizard, choose EC2 as the service that will use this role. And then choose Next.\nIn the Attach permissions policies page, search for and select AmazonEC2FullAccess. And then choose Next.\nIn the Review page, enter the Role name and choose Create role.\nNote that the AmazonEC2FullAccess policy is used here for demonstration purposes. In a production environment, you should create a custom policy with the minimum required permissions.\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"ec2:AssociateAddress\",\n            \"ec2:DescribeAddresses\"\n        ],\n        \"Resource\": \"*\"\n        }\n    ]\n}","step-2-create-a-launch-template-for-the-load-balancer-instances#Step 2: Create a launch template for the load balancer instances":"Open the EC2 console.\nIn the sidebar, choose Instances > Launch Templates.\nChoose Create launch template.\nIn the Create launch template wizard, enter the following information:\nLaunch template name: Enter a name for your launch template.\nAuto Scaling guidance: Tick the box to enable the auto-scaling guidance.\nApplication and OS Images (Amazon Machine Image): choose Quick Start and select the latest Amazon Linux 2023 AMI.\nInstance type: Choose t2.micro, which is eligible for the AWS Free Tier.\nKey pair (login): Choose your key pair. If you don't have one, you can Create new key pair.\nNetwork settings: Choose the load balancer security group you created earlier as the Common security groups.\nAdvanced details:\nIAM instance profile: Choose the role you created earlier.\nUse data: paste the following script to install and configure HAProxy. Replace <INSTANCE1_IP> and <INSTANCE2_IP> with the private IP addresses of the instances you will create later.\n#!/bin/bash\nyum update -y\nyum install -y haproxy\n# Attach the Elastic IP address to the instance\nexport INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\naws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id <EIP_ALLOCATION_ID>\ncat <<EOF > /etc/haproxy/haproxy.cfg\nfrontend http_front\nbind *:80\ndefault_backend http_back\nbackend http_back\n    balance roundrobin\n    server server1 <INSTANCE1_IP>:80 check\n    server server2 <INSTANCE2_IP>:80 check\nEOF\nsystemctl enable haproxy\nsystemctl start haproxy\nChoose Create launch template.","step-3-create-an-auto-scaling-group-for-the-load-balancer-instance#Step 3: Create an auto-scaling group for the load balancer instance":"In the EC2 console, choose Auto Scaling Groups in the sidebar.\nChoose Create Auto Scaling group.\nEnter Auto Scaling group name and the Launch template you created earlier. And then choose Next.\nChoose the VPC you created earlier and select the Public subnets. And then choose Next.\nKeep choose Next until you reach the Review page. Review the settings and choose Create Auto Scaling group."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance":{"title":"Setup a Low-budget NAT Instance","data":{"network-address-translation-nat#Network Address Translation (NAT)":"Image: avinetworksNetwork Address Translation (NAT) is a method that allows multiple devices on a local network to share a single public IP (IPv4) address to access the internet.\nThe reason for using NAT is to reduce the number of public IP addresses required for a network.\nAs you know that the number of IPv4 addresses is limited (~4.3 billion), and the demand for public IP addresses is increasing rapidly.\nAdditionally, NAT provides a layer of security by hiding the internal IP addresses from the external network.Initially, NAT was used to extend the life of IPv4 addresses until IPv6 was widely adopted.\nHowever, IPv4 addresses have been used for more than 30 years, and the transition to IPv6 is still slow.\nConsequently, NAT is still widely used in many networks, including home networks, small businesses, and cloud environments.On AWS, the recommended method for setting up NAT is to use a NAT Gateway, as it is a managed service that scales automatically and requires no maintenance.\nHowever, the NAT Gateway is not cheap, if not expensive for small workloads such as personal projects or development environments.\nAt the time of writing, the NAT Gateway costs $0.045 per hour plus $0.045 per GB data processed in the cheapest region (N. Virginia).\nIt means that if you run a NAT Gateway and not use it, you will still be charged at least $32.4 per month.Therefore, setting up an NAT instance is one of the cost-effective alternatives to the NAT Gateway in development and testing environments.","lab-overview#Lab Overview":"In this lab, we will set up NAT with an EC2 instance (also known as NAT instance).\nThe NAT instance will allow the instances in the private subnets to access the internet through it.\nAn Elastic Network Interface (ENI) will be created and attached as the secondary network interface to the NAT instance, it is responsible for receiving the traffic which comes from the private instances and forwarding it to the internet.\nWe will also put the NAT instance in an Auto-Scaling Group to ensure that the NAT instance would be automatically recovered if it is terminated (intentionally or unintentionally).The cost of running a NAT instance in this setup is low.\nIf you run the t3.micro On-Demand instance in the us-east-1 region, the cost will be around ~$7.5 if you run it for a month. It could be less if you use newer instance type generations like t4g.micro.\nThe ENI is free, and you are not using any other AWS services that incur additional costs except for the data transfer out of the NAT instance to the internet.\nMore details can be found here.","prerequisites#Prerequisites":"Before you begin this lab, you need the following:\nAn AWS account with the necessary permissions to create and manage resources. If you don't have an AWS account, you can create one here.\nBasic knowledge of AWS relavant services like EC2 and VPC.\nHow to use basic terminal commands."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance/clean-up":{"title":"Clean Up","data":{"":"Terminate the private instance.\nDelete Auto Scaling Group of the NAT instance. The NAT instance will be terminated automatically.\nDelete the Launch Template of the NAT instance.\nDelete the ENI\nDelete the IAM role.\nDelete the Security Group of the NAT instance.\nDelete the Security Group of the private instances.\nDelete the VPC."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance/conclusion":{"title":"Conclusion","data":{"":"Throughout this lab, we have set up a low-budget NAT instance which is a cost-effective alternative to the NAT Gateway in development and testing environments.\nIt has met the requirements of allowing the instances in the private subnets to access the internet through the NAT instance.\nAdditionally, the NAT instance is automatically recovered if it is terminated (intentionally or unintentionally) due to the Auto-Scaling Group.Although the NAT instance is a cost-effective solution, it has some limitations compared to the NAT Gateway:\nScalability: The NAT instance does not scale automatically. You need to set up an Auto-Scaling Group to ensure that the NAT instance is replaced automatically if it is terminated.\nMaintenance: The NAT instance requires maintenance, such as patching, monitoring, and replacing the instance if it fails.\nPerformance: The NAT instance performance depends on the instance type you choose. If you choose a small instance type, it may not handle the traffic efficiently.\nDepending on your use case, you may need to consider these limitations and choose the appropriate solution."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance/create-a-vpc":{"title":"Create a Vpc","data":{"create-a-vpc#Create a VPC":"In this section, you will create a VPC with 2 public subnets and 2 private subnets across 2 AZs.\nOpen the VPC console.\nIn the sidebar, choose Your VPCs.\nChoose Create VPC.\nIn the VPC settings section, enter the following information:\nResources to create: VPC and more. It is a handy option that allows you to create a VPC quickly along with other resources like subnets, route tables, and internet gateways.\nName tag auto-generation: Enter your VPC name.\nIPv4 CIDR block: 10.0.0.0/16.\nNumber of Availability Zones (AZs): 2.\nNumber of public subnets: 2.\nNumber of private subnets: 2.\nNAT gateway: None, of course, because we are setting up a NAT instance.\nVPC endpoint: None.\nChoose Create VPC."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance/create-an-eni":{"title":"Create an Elastic Network Interface (ENI)","data":{"why-do-we-need-an-additional-eni#Why do we need an additional ENI?":"There are 2 things we must ensure when the NAT instance crashes or is terminated (accidentally or intentionally):\nThe NAT instance must be replaced automatically by another one. This will be achieved by setting up an Auto-Scaling Group in the next step.\nThe private route tables still point correctly to the new NAT instance.\nTo achieve this requirement, one of the easiest ways is to create an Elastic Network Interface (ENI).\nThis ENI will be attached to the NAT instance when it launches and all traffic to the internet from the private instances will go through this ENI.\nIf the NAT instance crashes or is terminated, the ENI will be detached from the old instance and attached to the new instance automatically.\nTherefore, the private instances will not be affected by the change.","create-the-eni#Create the ENI":"Open the EC2 console.\nIn the sidebar, choose Network Interfaces.\nChoose Create network interface.\nIn the Create network interface wizard, enter the following information:\nSubnet: Choose a public subnet you created earlier where the NAT instance will be launched.\nPrivate IP address: Leave it Auto-assign.\nSecurity groups: Choose the security group you created earlier for the NAT instance.\nTags: Add a tag with the key Name and value nat-eni. This tag will be used to identify the ENI later. So make sure to use the same key and value.\nChoose Create network interface.\nIn many real-world cases, keeping the NAT instance's public IP address static is important.\nFor example, if you integrate with a third-party service that requires a fixed IP address, you can use an Elastic IP address (EIP) and associate it with the ENI.\nHowever, for this lab, we will not implement this feature to keep the workshop simple and cost-effective."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance/create-nat-launch-template":{"title":"Create Launch Template for the NAT Instance","data":{"":"As mentioned earlier, the NAT instance will be set up in an Auto-Scaling Group.\nTherefore, we need to create a launch template for launching the NAT instance later.\nOpen the EC2 console.\nIn the sidebar, choose Instances > Launch Templates.\nChoose Create launch template.\nIn the Create launch template wizard, enter Launch template name and tick the checkbox for Auto Scaling guidance.\nIn Application and OS Images (Amazon Machine Image) section, choose Quick Start and select the latest Amazon Linux 2023 AMI.\nChoose t2.micro as Instance type, which is eligible for the AWS Free Tier. You can choose a different instance type based on your system requirements.\nChoose the Key pair for connecting to the NAT instance later. If you don't have a key pair, you can create one by choosing Create new key pair.\nIn the Network settings, choose the Security group you created earlier for the NAT instance.\nIn Advanced network configuration, choose Add network interface and enable Auto-assign public IP.\nIn Advanced details section, choose the IAM role you created in the previous step as the IAM instance profile.\nCopy the following script and paste it in the User data section. This script will attach the ENI to the instance, disable source/destination check, install and configure iptables for NAT.\n#!/bin/bash\nyum update -y\n# Get the instance ID\nTOKEN=$(curl -X PUT http://169.254.169.254/latest/api/token -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")\nINSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id -H \"X-aws-ec2-metadata-token: $TOKEN\")\n# Attach the ENI to the instance\nENI_ID=$(aws ec2 describe-network-interfaces --filters \"Name=tag:Name,Values=nat-eni\" --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text)\naws ec2 attach-network-interface --network-interface-id ${ENI_ID} --instance-id $INSTANCE_ID --device-index 1\n# Disable source/destination check for two interfaces of the instance\nENI_IDS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query \"Reservations[*].Instances[*].NetworkInterfaces[*].NetworkInterfaceId\" --output text)\nfor ENI_ID in $ENI_IDS; do\n    aws ec2 modify-network-interface-attribute --network-interface-id $ENI_ID --no-source-dest-check\ndone\n# Install iptables, enable IP forwarding, and configure iptables\nyum install iptables-services -y\nsystemctl enable iptables\nsystemctl start iptables\necho \"net.ipv4.ip_forward = 1\" > /etc/sysctl.d/custom-ip-forwarding.conf\nsysctl -p /etc/sysctl.d/custom-ip-forwarding.conf\n/sbin/iptables -t nat -A POSTROUTING -o enX0 -j MASQUERADE\n/sbin/iptables -F FORWARD\nservice iptables save\nIMPORTANT: If in the step 5. Create an ENI, you used a different value for the Name tag, replace nat-eni with the value you used in line 9.\nChoose Create launch template."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance/create-nat-role":{"title":"Create IAM Role for the NAT Instance","data":{"":"The NAT instance will have to perform the following actions in its launch process:\nDisable the Source/destination check, which is enabled by default for EC2 instances. If not, the NAT instance will drop the traffic that is not coming from or going to itself.\nAttach the ENI. The NAT instance will use this ENI to forward traffic from the private instances to the internet and vice versa.\nTherefore, we need to create an IAM role and attach it to the NAT instance later. This IAM role allows the NAT instance to perform the actions mentioned above.\nOpen the IAM console.\nIn the sidebar, choose Roles.\nChoose Create role.\nChoose AWS service as the Trusted entity type and select EC2 as the Use case. Choose Next.\nIn the Add permissions page, search for and select AmazonEC2FullAccess. And then choose Next.Note that the AmazonEC2FullAccess policy is used here for demonstration purposes. In a production environment, you should create a custom policy with the minimum required permissions.\nFor example, you can create a custom policy with the following permissions:\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:ModifyInstanceAttribute\",\n                \"ec2:ModifyNetworkInterfaceAttribute\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\nIn the Review page, enter the Role name and choose Create role."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance/create-nat-security-group":{"title":"Create the Security Group for the NAT Instance","data":{"":"We need to create a security group for the NAT instance. This security group allows inbound traffic from the private instances and outbound traffic to everywhere.\nWe also allow SSH access to the NAT instance for testing purposes.\nIn the VPC console, choose Security Groups in the sidebar.\nChoose Create security group.\nEnter Security group name, Description and select the VPC you created in the previous step.\nAdd the following inbound rules:\nThe first rule:\nType: All traffic.\nSource: Select the private security group you created in the previous step.\nThe second rule:\nType: SSH.\nSource: 0.0.0.0/0 (everywhere). Or you can specify your IP address for security reasons.\nNote: The second inbound rule allows SSH access to the NAT instance from anywhere for testing purposes. You can restrict it to your IP address for security reasons.\nAdd this outbound rule:\nType: All traffic.\nDestination: 0.0.0.0/0 (everywhere).\nChoose Create security group."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance/create-private-security-group":{"title":"Create the Security Group for Private Instances","data":{"":"In this section, we will create a security group for the private instances. This security group allows inbound traffic from local network and outbound traffic to everywhere.\nIn the VPC console, choose Security Groups in the sidebar.\nChoose Create security group.\nEnter Security group name, Description and select the VPC you created in the previous step.\nAdd one inbound rule with the following settings:\nType: All traffic.\nSource: 10.0.0.0/16.\nAdd one outbound rule with the following settings:\nType: All traffic.\nDestination: 0.0.0.0/0 (everywhere).\nNote: For simplicity, we allow all traffic in local network to the private instances. In a production environment, you should restrict it to only the necessary ports and sources.\nChoose Create security group."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance/launch-nat-instance-with-asg":{"title":"Launch NAT Instance with Auto Scaling Group","data":{"":"We have already created all the necessary resources to set up a NAT instance.\nNow, we will launch the NAT instance using an Auto-Scaling Group.\nOpen the EC2 console.\nIn the sidebar, choose Auto Scaling Groups.\nChoose Create Auto Scaling group.\nEnter Auto Scaling group name and choose the Launch template you created earlier. Choose Next.\nIn the Network section, choose the VPC and the Subnet where the ENI is created in the previous step. Choose Next.\nKeep choosing Next until you reach the Review page. Choose Create Auto Scaling group."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance/test-nat-instance":{"title":"Test the NAT instance","data":{"create-an-ec2-instance-in-the-private-subnet#Create an EC2 Instance in the Private Subnet":"Now that you have set up the NAT instance, we can test it by launching an EC2 instance in the private subnet and verifying that it can access the internet through the NAT instance.\nOpen the EC2 console.\nIn the sidebar, choose Instances.\nChoose Launch instances.\nIn the Amazon Machine Image (AMI), choose Quick Start and Amazon Linux 2023 AMI.\nChoose t2.micro as the Instance type which is eligible for the AWS Free Tier.\nChoose Key pair for SSH access to the instance. We should use the same key pair as the NAT instance for SSH agent forwarding in the next step.\nIn the Network settings, select the VPC we created earlier and choose one of the private subnets. Then choose the security group you created earlier for the private instance.\nChoose Launch instance.","ssh-agent-forwarding-to-nat-instance#SSH Agent Forwarding to NAT Instance":"To test the NAT instance, we need to SSH into the private instance through the NAT instance.\nInstead of copying the private key to the NAT instance, which is not recommended for security reasons, we will use SSH agent forwarding.\nOpen a terminal on your local machine.\nRun the following command to enable SSH agent forwarding:\nssh-add -K /path/to/your/private-key.pem\nssh -A ec2-user@<NAT-INSTANCE-PUBLIC-IP>\nReplace /path/to/your/private-key.pem with the path to your private key and <NAT-INSTANCE-PUBLIC-IP> with the public IP address of the NAT instance which you can find in the EC2 console.In my case, the key is located at ~/.ssh/benlab.pem and the public IP address of the NAT instance is 18.209.95.90. So, the command will be:\nssh-add -K ~/.ssh/benlab.pem\nssh -A ec2-user@18.209.95.90\nOnce you are connected to the NAT instance, you can SSH into the private instance using the private IP address:\nssh ec2-user@<PRIVATE-INSTANCE-PRIVATE-IP>\nReplace <PRIVATE-INSTANCE-PRIVATE-IP> with the private IP address of the private instance which you can find in the EC2 console.\nIn my case, the private IP address of the private instance is 10.0.157.135. So, the command will be:\nssh ec2-user@10.0.157.135\nYou should now be connected to the private instance through the NAT instance.","test-internet-connectivity#Test Internet Connectivity":"Now that you are connected to the private instance, we will run some commands to test the internet connectivity.\nPing to google.com:\nping -c 4 google.com\nYou should see the ping responses from google.com.\nGet the public IP address:\ncurl ipv4.icanhazip.com\nYou should see the public IP address of the NAT instance. This confirms that the private instance is using the NAT instance to access the internet.","test-the-nat-instance-recovery#Test the NAT Instance Recovery":"Since the NAT instance is launched in the Auto-Scaling Group, it will be automatically recovered if the instance is terminated (intentionally or unintentionally).\nWe will test this by terminating the NAT instance and verifying that a new NAT instance is launched in its place.","terminate-the-nat-instance#Terminate the NAT Instance":"Open the EC2 console.\nIn the sidebar, choose Instances.\nSelect the NAT instance.\nChoose Instance State > Terminate instance.\nChoose Terminate in the confirmation dialog.","verify-the-recovery#Verify the Recovery":"Now you can see that the NAT instance is terminated. And after a few minutes, a new NAT instance will be launched and configured automatically.\nYou can verify this by checking the EC2 console.You can SSH into the private instance again and test the internet connectivity, as we did earlier. It should work without any issues."}},"/workshops/eni-and-use-cases/setup-a-low-budget-nat-instance/update-private-route-tables":{"title":"Update Private Route Tables","data":{"":"We have two route tables, one for each private subnet. For now, these route tables just have a local route.We need to add them another route that points to the ENI that will be attached to the NAT instance.\nOpen the VPC console.\nIn the sidebar, choose Route Tables.\nSelect the route table associated with the first private subnet.\nChoose the Routes tab and then Edit routes.\nChoose Add route.\nIn the Destination field, enter 0.0.0.0/0.\nIn the Target field, choose Network Interface and select the Network Interface ID we created in the previous step.\nChoose Save changes.\nRepeat the same steps for the route table associated with the second private subnet."}}}